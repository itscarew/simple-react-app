{"version":3,"sources":["components/cards/card.js","components/cards/cardlists.js","components/search/searchbox.js","components/scroll/scroll.js","components/errorBoundary/errBoundary.js","redux/robots/robotSelector.js","App.js","redux/robots/robotsAction.js","redux/search/searchActions.js","serviceWorker.js","redux/search/searchReducer.js","redux/robots/robotsReducer.js","redux/root-reducer.js","redux/store/store.js","index.js"],"names":["Card","id","email","name","username","address","street","city","phone","website","className","src","alt","CardList","robots","Fragment","length","map","robot","key","SearchBox","handleSearch","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundary","props","state","hasError","err","info","this","setState","Component","selectRobotsList","selectRobots","createSelector","selectSearchField","search","searchField","selectErrorMessage","errorMessage","App","setRobots","setFilteredRobots","errorLoading","searchValue","connect","filter","toLowerCase","includes","dispatch","fetch","then","response","json","payload","FetchRobotsSuccess","catch","event","target","value","Boolean","window","location","hostname","match","INIT_STATE","isFetching","undefined","rootReducer","combineReducers","action","middlewares","thunk","store","createStore","compose","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.fc2f8098.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({\r\n  id,\r\n  email,\r\n  name,\r\n  username,\r\n  address: { street, city },\r\n  phone,\r\n  website,\r\n}) => {\r\n  return (\r\n    <div className=\" w-64   \">\r\n      <div className=\" bg-green-400 m-2 rounded shadow \">\r\n        <img\r\n          src={`https://robohash.org/${id}`}\r\n          alt=\"test\"\r\n          className=\"h-64 w-64 \"\r\n        />\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold \"> Name : {name}</h2>\r\n          <h3 className=\"text-1xl\"> Username : {username}</h3>\r\n          <p> Email : {email}</p>\r\n\r\n          <details>\r\n            <summary>More Information:</summary>\r\n            <p> Street : {street} </p>\r\n            <p> City : {city} </p>\r\n            <p> Phone : {phone} </p>\r\n            <p> website : {website} </p>\r\n          </details>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport Card from \"./card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {robots.length > 0 ? (\r\n        <div className=\"flex items-baseline justify-center flex-wrap m-3 \">\r\n          {robots.map((robot) => (\r\n            <Card key={robot.id} id={robot.id} {...robot} />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"special text-center text-3xl \">Nothing to Show</div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ handleSearch }) => {\r\n  return (\r\n    <input\r\n      className=\"m-auto h-8 p-4 w-1/4  \"\r\n      type=\"text\"\r\n      placeholder=\"Search Robots...\"\r\n      onChange={handleSearch}\r\n      name=\"searchValue\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = ({ children }) => {\r\n  return (\r\n    <div\r\n      className=\"m-3\"\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid white \",\r\n        height: \"800px\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(err, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <h1 className=\" special text-center text-3xl \">\r\n          Ooops...things aren't moving nice !!\r\n        </h1>\r\n      );\r\n    } else return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectRobotsList = (state) => state.robots;\r\n\r\nconst selectSearch = (state) => state.search;\r\n\r\nexport const selectRobots = createSelector(\r\n  [selectRobotsList],\r\n  (robots) => robots.robots\r\n);\r\n\r\nexport const selectSearchField = createSelector(\r\n  [selectSearch],\r\n  (search) => search.searchField\r\n);\r\n\r\nexport const selectErrorMessage = createSelector(\r\n  [selectRobotsList],\r\n  (robots) => robots.errorMessage\r\n);\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"./components/cards/cardlists\";\nimport SearchBox from \"./components/search/searchbox\";\nimport Scroll from \"./components/scroll/scroll\";\nimport ErrorBoundary from \"./components/errorBoundary/errBoundary\";\nimport { FetchRobotsAsync } from \"./redux/robots/robotsAction\";\nimport { setSearchField } from \"./redux/search/searchActions\";\n\nimport {\n  selectRobots,\n  selectSearchField,\n  selectErrorMessage,\n} from \"./redux/robots/robotSelector\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.setRobots();\n  }\n\n  render() {\n    const {\n      robots,\n      searchField,\n      handleSearch,\n      setFilteredRobots,\n      errorMessage,\n    } = this.props;\n    const errorLoading = (\n      <div className=\"bg-blue-900  p-8 text-center min-h-screen \">\n        <div className=\"special text-center text-3xl \">\n          {!errorMessage ? \"Loading ....\" : \"Ooops...seems something's broken\"}\n        </div>\n      </div>\n    );\n\n    if (robots.length === 0) {\n      return errorLoading;\n    } else\n      return (\n        <div className=\"bg-blue-900  p-8 text-center min-h-screen \">\n          <h1 className=\"special text-center text-5xl\"> Robot Friends </h1>\n          <SearchBox handleSearch={handleSearch} searchValue={searchField} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={setFilteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  robots: selectRobots(state),\n  setFilteredRobots: state.robots.robots.filter((robot) =>\n    robot.name.toLowerCase().includes(state.search.searchField.toLowerCase())\n  ),\n  searchField: selectSearchField(state),\n  errorMessage: selectErrorMessage(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setRobots: (robots) => dispatch(FetchRobotsAsync(robots)),\n  handleSearch: (event) => dispatch(setSearchField(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const FetchRobotsStart = () => ({\r\n  type: \"FETCH_ROBOTS_START\",\r\n});\r\n\r\nexport const FetchRobotsSuccess = (robots) => ({\r\n  type: \"FETCH_ROBOTS_SUCCESS\",\r\n  payload: robots,\r\n});\r\n\r\nexport const FetchRobotsFailure = (errorMessage) => ({\r\n  type: \"FETCH_NEWS_FAILURE\",\r\n  payload: errorMessage,\r\n});\r\n\r\nexport const FetchRobotsAsync = (robots) => {\r\n  return (dispatch) => {\r\n    dispatch(FetchRobotsStart());\r\n\r\n    const url = `https://jsonplaceholder.typicode.com/users`;\r\n\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((json) => dispatch(FetchRobotsSuccess(json)))\r\n      .catch((err) => dispatch(FetchRobotsFailure(err)));\r\n  };\r\n};\r\n","export const setSearchField = (text) => ({\r\n  type: \"CHANGE_SEARCHFIELD\",\r\n  payload: text,\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const INIT_STATE = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchReducer = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_SEARCHFIELD\":\r\n      return {\r\n        ...state,\r\n        searchField: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const INIT_STATE = {\r\n  robots: [],\r\n  isFetching: false,\r\n  errorMessage: undefined,\r\n};\r\n\r\nexport const robotsReducer = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_ROBOTS_START\":\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n      };\r\n\r\n    case \"FETCH_ROBOTS_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        robots: action.payload,\r\n      };\r\n\r\n    case \"FETCH_NEWS_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        errorMessage: true,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { searchReducer } from \"./search/searchReducer\";\r\nimport { robotsReducer } from \"./robots/robotsReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  search: searchReducer,\r\n  robots: robotsReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\n\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../root-reducer\";\r\n\r\nconst middlewares = [thunk];\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  compose(applyMiddleware(...middlewares))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./css/index.css\";\nimport \"./css/custom.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./redux/store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}